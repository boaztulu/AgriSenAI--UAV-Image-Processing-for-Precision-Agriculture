# -*- coding: utf-8 -*-
import json
import subprocess

# Form implementation generated from reading ui file 'QtGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QMenuBar, QAction
from PyQt5.QtGui import QPixmap, QDesktopServices
from PyQt5.QtCore import QTimer
import  os
'''from fieldextraction import RasterProcessor
from  Plot_Extracter import  PlotExtracter
'''
#from plant_detection import PlantDetection

from Noise_remove import NoiseRemove
from extract_data import  ExtractData
from analysis import Analysis
from sensor_data import GroundData
from plantMasking import PlantDetection


class Ui_Processing(object):
    def setupUi(self, Processing):
        self.image_count = 0
        self.x1_value = ''
        self.x2_value = ''
        self.y1_value = ''
        self.y2_value = ''
        self.folder_path = ''
        self.outputPath = ''
        self.coordinates = ''
        self.rgb_path = ''
        self.thermal_path = ''
        self.python27_executable = 'C:/Python27/ArcGIS10.8/python.exe'
        #adding Menu Bar

        ''' self.menubar = QtWidgets.QMenuBar(Processing)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        Processing.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Processing)
        self.statusbar.setObjectName("statusbar")
        Processing.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(Processing)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(Processing)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_as = QtWidgets.QAction(Processing)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionEdit = QtWidgets.QAction(Processing)
        self.actionEdit.setObjectName("actionEdit")
        self.actionView = QtWidgets.QAction(Processing)
        self.actionView.setObjectName("actionView")
        self.actionHow_to_Use = QtWidgets.QAction(Processing)
        self.actionHow_to_Use.setObjectName("actionHow_to_Use")
        self.actionAbout_the_Software = QtWidgets.QAction(Processing)
        self.actionAbout_the_Software.setObjectName("actionAbout_the_Software")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuEdit.addAction(self.actionEdit)
        self.menuView.addAction(self.actionView)
        self.menuHelp.addAction(self.actionHow_to_Use)
        self.menuAbout.addAction(self.actionAbout_the_Software)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())'''

        Processing.setObjectName("Processing")
        Processing.resize(802, 600)
        Processing.setMouseTracking(True)
        Processing.setLayoutDirection(QtCore.Qt.LeftToRight)
        Processing.setAutoFillBackground(True)
        Processing.setStyleSheet("color:rgb(0, 85, 255);")
        Processing.setWindowIcon(QtGui.QIcon('IconImage.png'))

        # Create menu bar
        self.menuBar = QtWidgets.QMenuBar(Processing)
        self.menuBar.setGeometry(QtCore.QRect(30, 30, 802, 26))
        self.menuBar.setObjectName("menuBar")
        Processing.setMenuBar(self.menuBar)

        # Create file menu
        self.menuFile = QtWidgets.QMenu(self.menuBar)
        self.menuFile.setObjectName("menuFile")
        self.menuBar.addAction(self.menuFile.menuAction())

        # Create exit action
        self.actionExit = QtWidgets.QAction(Processing)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionExit)
        Processing.setMenuBar(self.menuBar)

        self.background_label = QtWidgets.QLabel(Processing)
        self.background_label.setGeometry(QtCore.QRect(0, 0, Processing.width(), Processing.height()))
        self.background_label.setPixmap(QtGui.QPixmap("background.jpg"))  # Replace with the actual path to your image
        self.background_label.setScaledContents(True)
        Processing.setObjectName("Processing")
        self.centralwidget = QtWidgets.QWidget(Processing)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 791, 561))
        self.tabWidget.setMouseTracking(False)
        self.tabWidget.setTabletTracking(False)
        self.tabWidget.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.tabWidget.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.tabWidget.setAcceptDrops(True)
        self.tabWidget.setInputMethodHints(QtCore.Qt.ImhNone)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.South)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideLeft)
        self.tabWidget.setDocumentMode(True)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")

        self.statusLabel = QtWidgets.QLabel('Status')
        self.statusLabel = QtWidgets.QLabel(Processing)

        self.statusLabel.setGeometry(QtCore.QRect(600, 440, 300, 41))
        # self.frstPgNexbtn.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)

        self.statusLabel.setFont(font)
        self.statusLabel.setObjectName("statusLabel")
        self.statusLabel.setStyleSheet(
            """
            QLabel {
                color: Red; /* Text Color */
                font-size: 15px; /* Text Size */
                font-weight:bold;
            }
            """
        )





        self.textBrowser = QtWidgets.QTextBrowser(self.tab)
        self.textBrowser.setGeometry(QtCore.QRect(250, 100, 201, 61))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.tab)
        self.textBrowser_2.setGeometry(QtCore.QRect(200, 240, 311, 51))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.textBrowser_2.setFixedSize(311, 51)  # Set fixed size for textBrowser_2
        self.fileUploadbtn = QtWidgets.QPushButton(self.tab)
        self.fileUploadbtn.setGeometry(QtCore.QRect(400, 350, 191, 41))
        self.fileUploadbtn.setFixedSize(191, 41)  # Set fixed size for fileUploadbtn

        self.fileUploadbtn.setCheckable(True)
        self.fileUploadbtn.setObjectName("fileUploadbtn")
        #self.fileUploadbtn.setStyleSheet("background-color: #cccccc; color: blue; border-radius: 5px;")
        self.style_button(self.fileUploadbtn)
        self.amount_ofimages = QtWidgets.QLabel('  File not Uploaded')
        self.amount_ofimages = QtWidgets.QLabel(self.tab)
        self.amount_ofimages.setObjectName("label")
        self.amount_ofimages.setStyleSheet(
            """
            QLabel {
                color: #ffffff; /* Text Color */
                font-size: 16px; /* Text Size */
                font-weight:bold;
            }
            """
        )


        # add container
        container_widget = QtWidgets.QWidget(self.tab)
        container_widget.setGeometry(QtCore.QRect(190, 90, 500, 300))  # Adjust the geometry as needed
        container_widget.setStyleSheet(
            "background-color: rgba(0, 0, 0, 100); border-radius: 10px;")
        # Set background color and rounded corners

        self.upldLayout = QtWidgets.QHBoxLayout()
        self.upldLayout.addWidget(self.fileUploadbtn)
        self.upldLayout.addWidget(self.amount_ofimages)
        # Add textBrowser, textBrowser_2, and pushButton to the container
        container_layout = QtWidgets.QVBoxLayout(container_widget)

        container_layout.addWidget(self.textBrowser)
        container_layout.addWidget(self.textBrowser_2)
        container_layout.addLayout(self.upldLayout)
        #container_layout.addWidget(self.amount_ofimages)


        self.frstPgNexbtn = QtWidgets.QPushButton(self.tab)
        self.frstPgNexbtn.setGeometry(QtCore.QRect(670, 480, 101, 41))
        #self.frstPgNexbtn.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)

        self.frstPgNexbtn.setFont(font)
        self.frstPgNexbtn.setCheckable(True)
        self.frstPgNexbtn.setObjectName("frstPgNexbtn")
        self.style_button(self.frstPgNexbtn)

        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.frame = QtWidgets.QFrame(self.tab_2)
        self.frame.setGeometry(QtCore.QRect(10, 20, 491, 491))
        self.frame.setAutoFillBackground(True)
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        background_image_path = 'fr1_image.png'
        image_width = 491
        image_height = 491
        # Load the image and resize it
        image = QtGui.QPixmap(background_image_path).scaled(image_width, image_height)

        # Create a palette and set the background image
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(image))
        self.frame.setPalette(palette)

        self.groupBox = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox.setGeometry(QtCore.QRect(510, 90, 241, 121))
        self.groupBox.setObjectName("groupBox")
        self.groupBox.setStyleSheet('color:white')
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_2.setGeometry(QtCore.QRect(90, 190, 391, 131))
        self.groupBox_2.setObjectName("groupBox_2")
        self.y1TextField = QtWidgets.QTextEdit(self.groupBox)
        self.y1TextField.setGeometry(QtCore.QRect(140, 50, 60, 30))
        self.y1TextField.setObjectName("y1TextField")
        self.y1TextField.setStyleSheet("color:blue")
        self.x1TextField = QtWidgets.QTextEdit(self.groupBox)
        self.x1TextField.setGeometry(QtCore.QRect(30, 50, 60, 30))
        self.x1TextField.setGeometry(QtCore.QRect(30, 50, 60, 30))
        self.x1TextField.setObjectName("x1TextField")
        self.x1TextField.setStyleSheet('color:blue')
        self.groupBox_3 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_3.setGeometry(QtCore.QRect(510, 230, 241, 121))
        self.groupBox_3.setObjectName("groupBox_3")
        self.groupBox_3.setStyleSheet('color:white;')
        self.y2TextField = QtWidgets.QTextEdit(self.groupBox_3)
        self.y2TextField.setGeometry(QtCore.QRect(140, 50, 60, 30))
        self.y2TextField.setObjectName("y2TextField")
        self.y2TextField.setStyleSheet('color:blue')
        self.x2TextField = QtWidgets.QTextEdit(self.groupBox_3)
        self.x2TextField.setGeometry(QtCore.QRect(20, 50, 60, 30))
        self.x2TextField.setObjectName("x2TextField")
        self.x2TextField.setStyleSheet('color:blue')
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.tab_2)
        self.textBrowser_3.setGeometry(QtCore.QRect(500, 10, 220, 51))
        self.textBrowser_3.setFixedSize(235,51)
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.fieldExtractBtn = QtWidgets.QPushButton(self.tab_2)
        self.fieldExtractBtn.setGeometry(QtCore.QRect(530, 380, 101, 41))
        self.style_button(self.fieldExtractBtn)
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.fieldExtractBtn.setFont(font)
        self.fieldExtractBtn.setCheckable(True)
        self.fieldExtractBtn.setObjectName("fieldExtractBtn")
        self.pushButton_3 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_3.setGeometry(QtCore.QRect(670, 480, 101, 41))
        self.style_button(self.pushButton_3)

        # add container for field extraction
        FidExcontainer_widget = QtWidgets.QWidget(self.tab_2)
        FidExcontainer_widget.setGeometry(QtCore.QRect(527, 20, 250, 400))  # Adjust the geometry as needed
        FidExcontainer_widget.setObjectName("FidExcontainer_widget")  # Set an object name for styling

        # Create a stylesheet only for the container
        container_style = "#FidExcontainer_widget {background-color: rgba(0, 0, 0, 200); border-radius: 10px; }"
        FidExcontainer_widget.setStyleSheet(container_style)

        # create layout for field extraction
        fildExtLyt = QtWidgets.QVBoxLayout(FidExcontainer_widget)
        fildExtLyt.addWidget(self.textBrowser_3)
        fildExtLyt.addSpacing(10)
        fildExtLyt.addWidget(self.groupBox)
        fildExtLyt.addSpacing(10)
        fildExtLyt.addWidget(self.groupBox_3)
        fildExtLyt.addSpacing(10)
        fildExtLyt.addWidget(self.fieldExtractBtn)
        fildExtLyt.addSpacing(10)





        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setCheckable(True)
        self.pushButton_3.setObjectName("pushButton_3")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.frame_2 = QtWidgets.QFrame(self.tab_3)
        self.frame_2.setGeometry(QtCore.QRect(10, 40, 461, 471))
        self.frame_2.setAutoFillBackground(True)
        self.frame_2.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        background_image_path = 'fr2_image.png'
        image_width = 461
        image_height = 471
        # Load the image and resize it
        image = QtGui.QPixmap(background_image_path).scaled(image_width, image_height)

        # Create a palette and set the background image
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(image))
        self.frame_2.setPalette(palette)


        self.textBrowser_5 = QtWidgets.QTextBrowser(self.tab_3)
        self.textBrowser_5.setGeometry(QtCore.QRect(520, 170, 241, 51))
        self.textBrowser_5.setFixedSize(280, 60)

        self.textBrowser_5.setObjectName("textBrowser_5")

        self.pushButton_4 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_4.setGeometry(QtCore.QRect(560, 310, 161, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.style_button(self.pushButton_4)

        self.cordinatSamplBtn = QtWidgets.QPushButton(self.tab_3)
        self.cordinatSamplBtn.setGeometry(QtCore.QRect(560, 310, 161, 31))
        self.cordinatSamplBtn.setObjectName("cordinatSamplBtn")
        self.style_button(self.cordinatSamplBtn)

        self.cordiateLayout = QtWidgets.QVBoxLayout()
        self.cordiateLayout.addWidget(self.cordinatSamplBtn)
        self.cordiateLayout.addSpacing(10)
        self.cordiateLayout.addWidget(self.pushButton_4)

        self.textBrowser_4 = QtWidgets.QTextBrowser(self.tab_3)
        self.textBrowser_4.setGeometry(QtCore.QRect(490, 250, 291, 31))
        self.textBrowser_4.setFixedSize(280, 31)
        self.textBrowser_4.setObjectName("textBrowser_4")


        #adding container for uplaod coordidnates
        Excontainer_widget = QtWidgets.QWidget(self.tab_3)
        Excontainer_widget.setGeometry(QtCore.QRect(490, 140, 300, 230))  # Adjust the geometry as needed
        Excontainer_widget.setObjectName("FidExcontainer_widget")  # Set an object name for styling

        # Create a stylesheet only for the container
        container_style = "#FidExcontainer_widget {background-color: rgba(0, 0, 0, 200); border-radius: 10px;}"
        Excontainer_widget.setStyleSheet(container_style)

        # create
        ExtLyt = QtWidgets.QVBoxLayout(Excontainer_widget)
        #ExtLyt.setContentsMargins(10,10,10,10)
        ExtLyt.addWidget(self.textBrowser_5)
        ExtLyt.addWidget(self.textBrowser_4)
        ExtLyt.addLayout(self.cordiateLayout)







##        
##        self.mQgsFileWidget = QgsFileWidget(self.tab_3)
##        self.mQgsFileWidget.setGeometry(QtCore.QRect(1250, 350, 90, 27))
##        self.mQgsFileWidget.setObjectName("mQgsFileWidget")
##        
        self.pushButton_12 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_12.setGeometry(QtCore.QRect(1050, 560, 211, 71))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setCheckable(True)
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_14 = QtWidgets.QPushButton(self.tab_3)
        self.style_button(self.pushButton_12)

        self.pushButton_14.setGeometry(QtCore.QRect(670, 480, 101, 41))
        self.style_button(self.pushButton_14)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setCheckable(True)
        self.pushButton_14.setObjectName("pushButton_14")
        self.style_button(self.pushButton_14)



        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.OtsuHeader = QtWidgets.QTextBrowser(self.tab_4)
        self.OtsuHeader.setGeometry(QtCore.QRect(200, 60, 400, 51))
        #self.OtsuHeader.setFixedSize(280, 60)
        self.frame_3 = QtWidgets.QFrame(self.tab_4)
        self.frame_3.setGeometry(QtCore.QRect(30, 160, 151, 91))
        self.frame_3.setAutoFillBackground(True)
        self.frame_3.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")

        background_image_path = 'fr4_image.jpg'
        image_width = 151
        image_height = 91
        # Load the image and resize it
        image = QtGui.QPixmap(background_image_path).scaled(image_width, image_height)

        # Create a palette and set the background image
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(image))
        self.frame_3.setPalette(palette)

        self.groupBox_4 = QtWidgets.QGroupBox(self.tab_4)
        self.groupBox_4.setGeometry(QtCore.QRect(440, 120, 331, 131))
        self.groupBox_4.setObjectName("groupBox_4")
        self.groupBox_4.setStyleSheet("color:white;")
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_4)
        self.groupBox_5.setGeometry(QtCore.QRect(90, 190, 391, 131))
        self.groupBox_5.setObjectName("groupBox_5")
        self.rgbbtn = QtWidgets.QPushButton(self.groupBox_4)
        self.rgbbtn.setGeometry(QtCore.QRect(10, 30, 301, 31))
        self.style_button(self.rgbbtn)

        self.rgbbtn.setObjectName("rgbbtn")

        self.thermalbtn = QtWidgets.QPushButton(self.groupBox_4)
        self.thermalbtn.setGeometry(QtCore.QRect(10, 80, 301, 31))
        self.style_button(self.thermalbtn)

        self.thermalbtn.setObjectName("thermalbtn")


        self.pushButton_13 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_13.setGeometry(QtCore.QRect(480, 300, 101, 41))
        self.style_button(self.pushButton_13)

        # adding container for uplaod coordidnates
        otsuCntainer_widget = QtWidgets.QWidget(self.tab_4)
        otsuCntainer_widget.setGeometry(QtCore.QRect(430, 150, 360, 255))  # Adjust the geometry as needed
        otsuCntainer_widget.setObjectName("FidExcontainer_widget")  # Set an object name for styling

        # Create a stylesheet only for the container
        container_style = "#FidExcontainer_widget {background-color: rgba(0, 0, 0, 200); border-radius: 10px;}"
        otsuCntainer_widget.setStyleSheet(container_style)

        # create
        otsLyt = QtWidgets.QVBoxLayout(otsuCntainer_widget)
        otsLyt.addWidget(self.groupBox_4)
        otsLyt.addSpacing(10)
        otsLyt.addWidget(self.pushButton_13)



        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setCheckable(True)
        self.pushButton_13.setObjectName("pushButton_13")

        self.frame_4 = QtWidgets.QFrame(self.tab_4)
        self.frame_4.setGeometry(QtCore.QRect(30, 285, 151, 91))
        self.frame_4.setAutoFillBackground(True)
        self.frame_4.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")

        background_image_path = 'fr3_image.jpg'
        image_width = 151
        image_height = 91
        # Load the image and resize it
        image = QtGui.QPixmap(background_image_path).scaled(image_width, image_height)

        # Create a palette and set the background image
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(image))
        self.frame_4.setPalette(palette)

        self.frame_5 = QtWidgets.QFrame(self.tab_4)
        self.frame_5.setGeometry(QtCore.QRect(250, 160, 151, 91))
        self.frame_5.setAutoFillBackground(True)
        self.frame_5.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")

        background_image_path = 'fr4_image.jpg'
        image_width = 151
        image_height = 91
        # Load the image and resize it
        image = QtGui.QPixmap(background_image_path).scaled(image_width, image_height)

        # Create a palette and set the background image
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(image))
        self.frame_5.setPalette(palette)

        self.frame_6 = QtWidgets.QFrame(self.tab_4)
        self.frame_6.setGeometry(QtCore.QRect(250, 285, 151, 91))
        self.frame_6.setAutoFillBackground(True)
        self.frame_6.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")

        background_image_path = 'fr3_image.jpg'
        image_width = 151
        image_height = 91
        # Load the image and resize it
        image = QtGui.QPixmap(background_image_path).scaled(image_width, image_height)

        # Create a palette and set the background image
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(image))
        self.frame_6.setPalette(palette)


        self.pushButton_15 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_15.setGeometry(QtCore.QRect(670, 480, 101, 41))
        self.style_button(self.pushButton_15)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setCheckable(True)
        self.pushButton_15.setObjectName("pushButton_15")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")

        self.NoisRemHeader = QtWidgets.QTextBrowser(self.tab_5)
        self.NoisRemHeader.setGeometry(QtCore.QRect(155, 100, 500, 51))

        self.frame_8 = QtWidgets.QFrame(self.tab_5)
        self.frame_8.setGeometry(QtCore.QRect(120, 250, 261, 131))
        self.frame_8.setAutoFillBackground(True)
        self.frame_8.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        background_image_path = 'frame_noise.jpg'
        image_width = 261
        image_height = 131
        # Load the image and resize it
        image = QtGui.QPixmap(background_image_path).scaled(image_width, image_height)

        # Create a palette and set the background image
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(image))
        self.frame_8.setPalette(palette)



        self.pushButton_16 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_16.setGeometry(QtCore.QRect(650, 480, 140, 41))
        self.style_button(self.pushButton_16)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setCheckable(True)
        self.pushButton_16.setObjectName("pushButton_16")
        self.frame_9 = QtWidgets.QFrame(self.tab_5)
        self.frame_9.setGeometry(QtCore.QRect(420, 250, 261, 131))
        self.frame_9.setAutoFillBackground(True)
        self.frame_9.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        background_image_path = 'frame_no_noise.jpg'
        image_width = 261
        image_height = 131
        # Load the image and resize it
        image = QtGui.QPixmap(background_image_path).scaled(image_width, image_height)

        # Create a palette and set the background image
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(image))
        self.frame_9.setPalette(palette)

        self.pushButton_17 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_17.setGeometry(QtCore.QRect(490, 480, 140, 41))
        self.style_button(self.pushButton_17)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_17.setFont(font)
        self.pushButton_17.setCheckable(True)
        self.pushButton_17.setObjectName("pushButton_17")
        self.tabWidget.addTab(self.tab_5, "")




        '''self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")


        self.pushButton_8 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_8.setGeometry(QtCore.QRect(150, 570, 211, 71))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setCheckable(True)
        self.pushButton_8.setObjectName("pushButton_8")
        self.style_button(self.pushButton_8)


        self.pushButton_9 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_9.setGeometry(QtCore.QRect(560, 570, 211, 71))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setCheckable(True)
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_10.setGeometry(QtCore.QRect(970, 570, 211, 71))
        self.style_button(self.pushButton_9)

        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setCheckable(True)
        self.pushButton_10.setObjectName("pushButton_10")
        self.style_button(self.pushButton_10)

        self.pushButton_18 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_18.setGeometry(QtCore.QRect(130, 270, 131, 41))
        self.style_button(self.pushButton_18)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_18.setFont(font)
        self.pushButton_18.setCheckable(True)
        self.pushButton_18.setObjectName("pushButton_18")
        self.pushButton_19 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_19.setGeometry(QtCore.QRect(530, 270, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_19.setFont(font)
        self.pushButton_19.setCheckable(True)
        self.pushButton_19.setObjectName("pushButton_19")
        self.pushButton_20 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_20.setGeometry(QtCore.QRect(340, 270, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_20.setFont(font)
        self.pushButton_20.setCheckable(True)
        self.pushButton_20.setObjectName("pushButton_20")
        self.tabWidget.addTab(self.tab_6, "")

        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.tabWidget.addTab(self.tab_7, "")

        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")

        # Create an instance of the Processing class
        #img_Prcinstance = ImageProcessor(self.outputPath)

        # Create a layout for the tab
        tab_layout = QtWidgets.QVBoxLayout(self.tab_7)
       # tab_layout.addWidget(img_Prcinstance)

        # Set the layout for the tab
        self.tab_7.setLayout(tab_layout)

        # Add the tab to the tabWidget
        self.tabWidget.addTab(self.tab_7, "Tab Name")'''

        #ground data processor tab

        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")

        # Create an instance of the Processing class
        gndProces = GroundData()

        # Create a layout for the tab
        tab_layout = QtWidgets.QVBoxLayout(self.tab_8)
        tab_layout.addWidget(gndProces)  

        # Set the layout for the tab
        self.tab_8.setLayout(tab_layout)

        # Add the tab to the tabWidget
        self.tabWidget.addTab(self.tab_8, "Ground Data")
        # end of the ground data processor

        # ground data processor tab

        self.tab_9 = QtWidgets.QWidget()
        self.tab_9.setObjectName("tab_9")

        # adding the button of the analysis page
        self.showThermalOut = QtWidgets.QPushButton(self.tab_9)
        self.showThermalOut.setGeometry(QtCore.QRect(250, 400, 150, 41))
        self.style_button(self.showThermalOut)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.showThermalOut.setFont(font)
        self.showThermalOut.setCheckable(True)
        self.showThermalOut.setObjectName("showThermalOut")

        self.showGroundOut = QtWidgets.QPushButton(self.tab_9)
        self.showGroundOut.setGeometry(QtCore.QRect(450, 400, 150, 41))
        self.style_button(self.showGroundOut)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.showGroundOut.setFont(font)
        self.showGroundOut.setCheckable(True)
        self.showGroundOut.setObjectName("showGroundOut")


        self.tabWidget.addTab(self.tab_9, "")

        # Create an instance of the Processing class
        ''' analysis_instance = Analysis()

        # Create a layout for the tab
        tab_layout = QtWidgets.QVBoxLayout(self.tab_9)
        tab_layout.addWidget(analysis_instance)       

        # Set the layout for the tab
        self.tab_9.setLayout(tab_layout)'''
        # Add the tab to the tabWidget
        self.tabWidget.addTab(self.tab_9, "Analysis")
        # end of anlysis
        Processing.setCentralWidget(self.centralwidget)

        #adin menu bar
        self.menubar = QtWidgets.QMenuBar(Processing)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 791, 561))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        Processing.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Processing)
        self.statusbar.setObjectName("statusbar")
        Processing.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(Processing)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(Processing)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_as = QtWidgets.QAction(Processing)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionEdit = QtWidgets.QAction(Processing)
        self.actionEdit.setObjectName("actionEdit")
        self.actionView = QtWidgets.QAction(Processing)
        self.actionView.setObjectName("actionView")
        self.actionHow_to_Use = QtWidgets.QAction(Processing)
        self.actionHow_to_Use.setObjectName("actionHow_to_Use")
        self.actionAbout_the_Software = QtWidgets.QAction(Processing)
        self.actionAbout_the_Software.setObjectName("actionAbout_the_Software")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuEdit.addAction(self.actionEdit)
        self.menuView.addAction(self.actionView)
        self.menuHelp.addAction(self.actionHow_to_Use)
        self.menuAbout.addAction(self.actionAbout_the_Software)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())


        self.statusbar = QtWidgets.QStatusBar(Processing)
        self.statusbar.setObjectName("statusbar")
        Processing.setStatusBar(self.statusbar)


        # disable the window maximize
        Processing.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint | QtCore.Qt.WindowCloseButtonHint)

        self.retranslateUi(Processing)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Processing)

    def retranslateUi(self, Processing):
        _translate = QtCore.QCoreApplication.translate
        Processing.setWindowTitle(_translate("Processing", "Temperature Data Extractor"))
        self.textBrowser.setHtml(_translate("Processing", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:28pt; font-weight:600; color:#00aaff;\">Welcome</span></p></body></html>"))
        self.textBrowser_2.setHtml(_translate("Processing", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                              
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt; font-style:italic;\">Upload Images Folder</span></p></body></html>"))



        self.fileUploadbtn.setText(_translate("Processing", "Add Folder"))
        self.fileUploadbtn.clicked.connect(self.upload_images)
        self.frstPgNexbtn.setText(_translate("Processing", "Next"))
        self.amount_ofimages.setText(_translate("Processing", f"File Not Uploaded"))
        self.statusLabel.setText(_translate("Processing", ''))
        self.frstPgNexbtn.clicked.connect(lambda :self.open_Next_Tab(self.tab_2))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Processing", "Welcome"))
        self.groupBox.setTitle(_translate("Processing", "Point 1"))
        self.groupBox_2.setTitle(_translate("Processing", "GroupBox"))
        self.y1TextField.setPlaceholderText(_translate("Processing", "Y1"))
        self.x1TextField.setHtml(_translate("Processing", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"


"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.x1TextField.setPlaceholderText(_translate("Processing", "X1"))
        self.groupBox_3.setTitle(_translate("Processing", "Point 2"))
        self.y2TextField.setPlaceholderText(_translate("Processing", "Y2"))
        self.x2TextField.setHtml(_translate("Processing", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.x2TextField.setPlaceholderText(_translate("Processing", "X2"))
        self.textBrowser_3.setHtml(_translate("Processing", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" dir=\'rtl\' style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:20pt; font-weight:600;\">Field Extraction</span></p></body></html>"))
        self.fieldExtractBtn.setText(_translate("Processing", "Extract"))
        self.fieldExtractBtn.clicked.connect(self.FieldExtraction)
        self.pushButton_3.setText(_translate("Processing", "Next"))
        self.pushButton_3.clicked.connect(lambda :self.open_Next_Tab(self.tab_3))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Processing", "Field Extraction"))
        self.pushButton_4.setText(_translate("Processing", "Upload points"))
        self.pushButton_4.clicked.connect(self.PlotExtraction)
        self.cordinatSamplBtn.setText(_translate("Processing","Download Points" ))
        self.cordinatSamplBtn.clicked.connect(self.download_points)
        self.textBrowser_4.setHtml(_translate("Processing", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Please use the sample points format provided below.</p></body></html>"))
        self.textBrowser_5.setHtml(_translate("Processing", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" dir=\'rtl\' style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:20pt; font-weight:600;\">Plot Extraction</span></p></body></html>"))
        self.OtsuHeader.setHtml(_translate("Processing",
                                              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                              "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                              "p, li { white-space: pre-wrap; }\n"
                                              "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                              "<p align=\"center\" dir=\'rtl\' style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:20pt; font-weight:600;\">Plant Region Detection</span></p></body></html>"))
        self.NoisRemHeader.setHtml(_translate("Processing",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                           "<p align=\"center\" dir=\'rtl\' style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:20pt; font-weight:600;\">Noise Removal & Data Extraction</span></p></body></html>"))

        self.pushButton_12.setText(_translate("Processing", "extract"))
        self.pushButton_14.setText(_translate("Processing", "Next"))
        self.pushButton_14.clicked.connect(lambda : self.open_Next_Tab(self.tab_4))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Processing", "Plot Extraction"))
        self.groupBox_4.setTitle(_translate("Processing", "Select Image path"))
        self.groupBox_5.setTitle(_translate("Processing", "GroupBox"))
        self.rgbbtn.setText(_translate("Processing", "Select RGB Image Path"))
        self.rgbbtn.clicked.connect(lambda:self.otsu_imagePath('rgb'))
        self.thermalbtn.setText(_translate("Processing", "Select Thermal Image Path"))
        self.thermalbtn.clicked.connect(lambda:self.otsu_imagePath('thermal'))
        self.pushButton_13.setText(_translate("Processing", "Start Process"))
        self.pushButton_13.clicked.connect(self.plant_det_otsu)
        self.pushButton_15.setText(_translate("Processing", "Next"))
        self.pushButton_15.clicked.connect(lambda :self.open_Next_Tab(self.tab_5))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("Processing", "Plant Detection"))
        self.pushButton_16.setText(_translate("Processing", "Extract Data"))
        self.pushButton_16.clicked.connect(self.extract_csvData)
        self.pushButton_17.setText(_translate("Processing", "Remove Noise"))
        self.pushButton_17.clicked.connect(self.noise_remover)

        self.showThermalOut.setText(_translate("Processing", "Thermal Output"))
        self.showThermalOut.clicked.connect(self.show_thermalOutput_folder)

        self.showGroundOut.setText(_translate("Processing", "Sensor Output"))
        self.showGroundOut.clicked.connect(self.show_sensorOutput_folder)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("Processing", "Clean>Extract"))
        #self.pushButton_8.setText(_translate("Processing", "Extract Dta"))

        '''self.pushButton_9.setText(_translate("Processing", "Save"))
        self.pushButton_10.setText(_translate("Processing", "Visualize"))
        self.pushButton_18.setText(_translate("Processing", "Extract Data"))'''
        #self.pushButton_18.clicked.connect(self.extract_csvData)
        '''self.pushButton_19.setText(_translate("Processing", "Visualize"))
        self.pushButton_20.setText(_translate("Processing", "Save"))
        self.pushButton_20.clicked.connect(lambda:self.showMessage(f'Saved in: {self.outputPath}'))'''
        '''self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("Processing", "Extract Data"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_7), _translate("Processing", "Processor"))'''
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_8), _translate("Processing", "Ground Data"))
        #self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_9), _translate("Processing", "Analysis"))
        self.menuFile.setTitle(_translate("Processing", "File"))

        self.menuEdit.setTitle(_translate("Processing", "Edit"))
        self.menuView.setTitle(_translate("Processing", "View"))
        self.menuHelp.setTitle(_translate("Processing", "Help"))
        self.menuAbout.setTitle(_translate("Processing", "About"))
        self.actionOpen.setText(_translate("Processing", "Open"))
        self.actionSave.setText(_translate("Processing", "Save"))
        self.actionSave_as.setText(_translate("Processing", "Save as"))
        self.actionEdit.setText(_translate("Processing", "Edit"))
        self.actionView.setText(_translate("Processing", "View"))
        self.actionHow_to_Use.setText(_translate("Processing", "How to Use"))
        self.actionAbout_the_Software.setText(_translate("Processing", "About the Software"))
        #from qgsfilewidget import QgsFileWidget
    '''FUNCTIONS FOR STYLING BUTTON'''

    def style_button(self, button):
        button.setStyleSheet(
            """
            QPushButton {
                background-color: #eb1921; /* Button Color */
                color: #ffffff; /* Text Color */
                border-radius: 5px;
                /*border: 1px solid #3498db;  Border Color */
                padding: 5px 10px; /* Padding inside the button */
                font-size:17px;
                font-weight:bold;
            }
            QPushButton:hover {
                background-color: #b21016; /* Hover Color */
                border: 1px solid #2980b9; /* Hover Border Color */
            }
            """
        )
        button.setCursor(Qt.PointingHandCursor)  # Change cursor on hover


    '''' function for pro'''

    '''********** Function implementation'''
    def UplodingFileFun(self):
        print('Here Upload your file')
        self.amount_ofimages.setText(f' Amount of uplaoded image: {self.image_count} ')
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_names, _ = QFileDialog.getOpenFileNames(self, "Choose Images", "",
                                                     "Image Files (*.png *.jpg *.bmp *.gif);;All Files (*)",
                                                  options=options)
    def UploadDialog(self):
        self.upload_images()

    def upload_images(self):
        folder_path = QFileDialog.getExistingDirectory()
        self.folder_path = folder_path
        print(f'folder path:{folder_path}')

        if folder_path:
            image_count = 0
            valid_image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', 'tif', 'tiff']  # Add more extensions if needed

            for filename in os.listdir(folder_path):
                if any(filename.lower().endswith(ext) for ext in valid_image_extensions):
                    image_count += 1

            self.amount_ofimages.setText(f'  Amount of uploaded image: {image_count} ')
            #self.frstPgNexbtn.setEnabled(True)
        else:
            self.amount_ofimages.setText('  No Folder Selected')


    def otsu_imagePath(self, imageType):
        if imageType == 'rgb':  #setting the direoctory of the rgb
            folder_path = QFileDialog.getExistingDirectory()
            self.rgb_path = folder_path
            self.showMessage('Alert', 'RGB path is selected')
        if imageType =='thermal':
            folder_path = QFileDialog.getExistingDirectory()
            self.showMessage('Alert', 'Thermal Path is selected')
            self.thermal_path = folder_path



    #function to uplaod points and process the plot extracter  not in use
    def upload_coordinates(self):
       try:
           file_path, _ = QFileDialog.getOpenFileName()


           if file_path:
               with open(file_path, 'r') as json_file:
                   self.plot_coordinates = json.load(json_file)


       except Exception as e:
           self.showMessage("Error!", "Select the correct coordinate File")


    def extraction(self):
        workspace = self.folder_path


        self.x1_value = float(self.x1TextField.toPlainText())
        self.x2_value = float(self.x2TextField.toPlainText())
        self.y1_value = float(self.y1TextField.toPlainText())
        self.y2_value = float(self.y2TextField.toPlainText())
        plot_coordinates = {
            'Field': (self.x1_value, self.y1_value, self.x2_value ,self.y2_value),
            # Add the coordinates for all 24 plots
        }

        # Create an instance of the RasterProcessor class
        #processor = RasterProcessor(workspace, plot_coordinates)


       # response, self.outputPath  = processor.process_rasters()

        #self.showMessage(response)


    def FieldExtraction(self):
        # Get the two numbers from somewhere (e.g., user input)
        self.statusLabel.setText('Processing Please wait...')
        QtWidgets.QApplication.processEvents()

        '''' , str(self.x1_value),str(self.y1_value),str(self.x2_value),str(self.y2_value) '''

        try:
            self.x1_value = self.x1TextField.toPlainText()
            self.x2_value = self.x2TextField.toPlainText()
            self.y1_value = self.y1TextField.toPlainText()
            self.y2_value = self.y2TextField.toPlainText()

            # Define paths and script to be executed
            python27_executable = 'C:/Python27/ArcGIS10.8/python.exe'
            script_path = 'fieldextraction.py'
            # script_path = r'C:\Users\analm\Documents\test gui\subreturn.py'
            inputPath = self.folder_path
            # Use the subprocess module to run the Python 2.7 script with the parameters
            result = subprocess.run([python27_executable, script_path,inputPath,self.x1_value,self.y1_value,self.x2_value,self.y2_value], capture_output=True,
                                    text=True)

            # Check if the subprocess ran successfully
            if result.returncode == 0:
                output = result.stdout.strip()
                self.outputPath  = output
                self.showMessage('Output',  f'Process finished\nfile saved in: {self.outputPath}')

            else:
                self.showMessage('Error!: ', f'{result.stderr}\nPlease, use proper data and steps')
        except Exception as e:
            self.showMessage("Error: ",  'Please, use proper data and steps')
        self.statusLabel.setText('')


    def PlotExtraction(self):



        # Define paths and script to be executed




        '''' , str(self.x1_value),str(self.y1_value),str(self.x2_value),str(self.y2_value) '''
        try:
            script_path = 'eachPlotExtraction.py'
            # script_path = r'C:\Users\analm\Documents\test gui\subreturn.py'
            inputPath = self.folder_path
            file_path, _ = QFileDialog.getOpenFileName()
            if file_path:
                self.statusLabel.setText('Processing Please wait...')
                QtWidgets.QApplication.processEvents()
                coordinatePath = file_path
            # Use the subprocess module to run the Python 2.7 script with the parameters
            result = subprocess.run([self.python27_executable, script_path,inputPath,coordinatePath], capture_output=True,
                                    text=True)

            # Check if the subprocess ran successfully
            if result.returncode == 0:
                output = result.stdout.strip()
                self.outputPath  = output
                self.showMessage('Plot Extraction',  output)
                print('outputpath Path:', output)
            else:
                self.showMessage('Error!: ', f'{result.stderr} \nPlease, select the file properly')
        except Exception as e:
            self.showMessage("Error: ",  f'{str(e)}\nPlease, select the file properly')

        self.statusLabel.setText('')
    def PlantDetection(self):


        # Define paths and script to be executed

        script_path = 'plantMasking.py'
        #script_path = r'C:\Users\analm\Documents\test gui\subreturn.py'


        try:
            # Use the subprocess module to run the Python 2.7 script with the parameters
            result = subprocess.run([self.python27_executable, script_path,self.rgb_path, self.thermal_path], capture_output=True,
                                    text=True)

            # Check if the subprocess ran successfully
            if result.returncode == 0:
                output = result.stdout.strip()
                self.outputPath  = output
                self.showMessage('Plant Detection ',  output)
                print('outputpath Path:', output)
            else:
                self.showMessage('Error!: ', result.stderr)
        except Exception as e:
            self.showMessage("Error: ",  str(e))



    #function to downoad the sumple cooordinate points

    def download_points(self):


        folder_path = QFileDialog.getExistingDirectory()

        if folder_path:
            # Your plot_coordinates dictionary
            plot_coordinates = {
                'Plot1': (-80.500547, 25.513289, -80.500441, 25.513240),
                'Plot2': (-80.500700, 25.513286, -80.500594, 25.513236),
                'Plot3': (-80.500853, 25.513284, -80.500747, 25.513234),
                'Plot4': (-80.501004, 25.513283, -80.500898, 25.513233),
                'Plot5': (-80.501003, 25.513210, -80.500898, 25.513160),
                'Plot6': (-80.500852, 25.513211, -80.500747, 25.513161),
                'Plot7': (-80.500700, 25.513212, -80.500595, 25.513162),
                'Plot8': (-80.500546, 25.513213, -80.500440, 25.513163),
                'Plot9': (-80.500546, 25.513140, -80.500440, 25.513090),
                'Plot10': (-80.500699, 25.513140, -80.500593, 25.513090),
                'Plot11': (-80.500850, 25.513137, -80.500744, 25.513087),
                'Plot12': (-80.501003, 25.513135, -80.500898, 25.513085),
                'Plot13': (-80.501003, 25.513062, -80.500898, 25.513011),
                'Plot14': (-80.500849, 25.513063, -80.500744, 25.513012),
                'Plot15': (-80.500699, 25.513064, -80.500594, 25.513014),
                'Plot16': (-80.500549, 25.513065, -80.500443, 25.513015),
                'Plot17': (-80.500545, 25.512993, -80.500440, 25.512942),
                'Plot18': (-80.500699, 25.512992, -80.500594, 25.512941),
                'Plot19': (-80.500849, 25.512988, -80.500743, 25.512939),
                'Plot20': (-80.501002, 25.512988, -80.500896, 25.512937),
                'Plot21': (-80.501002, 25.512913, -80.500897, 25.512863),
                'Plot22': (-80.500845, 25.512915, -80.500740, 25.512864),
                'Plot23': (-80.500700, 25.512917, -80.500595, 25.512867),
                'Plot24': (-80.500543, 25.512918, -80.500438, 25.512868),
                # Add the coordinates for all 24 plots
            }
            file_path = folder_path + "/plot_coordinates.json"
            with open(file_path, 'w') as json_file:
                json.dump(plot_coordinates, json_file)
    #function to uplaod th e cooordinate points





    #function for plant detection with otsu algorithm
    ''' def plant_det_otsu(self): this is the same function with different code
        detect_otsu = PlantDetection(self.rgb_path, self.thermal_path)
        response, self.outputPath = detect_otsu.plant_detector()
        self.showMessage('Plant Detection',response)'''

    def plant_det_otsu(self):
        try:
            self.statusLabel.setText('Processing Please wait...')
            QtWidgets.QApplication.processEvents()
            detect_otsu = PlantDetection(self.rgb_path, self.thermal_path)
            response, self.outputPath = detect_otsu.plantDetection_function()
            self.showMessage('Plant Detection', response)
        except Exception as e:
            self.showMessage("Error!", f'{e} \n Please, Select the file properly')
        self.statusLabel.setText('')
    def chekc(self):
        print('clicked')

    #function for noise removal
    def noise_remover(self):
        self.statusLabel.setText('Processing Please wait...')
        QtWidgets.QApplication.processEvents()
        self.noiseRem = NoiseRemove(self.outputPath)
        response, self.outputPath = self.noiseRem.removeNoise()
        self.showMessage('Noise Removal', response)
        print(f'noise remover output path: {self.outputPath}')
        self.statusLabel.setText('')
    def extract_csvData(self):
       try:
           self.statusLabel.setText('Processing Please wait...')
           QtWidgets.QApplication.processEvents()
           self.extInst = ExtractData(self.outputPath)
           response, self.outputPath = self.extInst.extract_csv()
           self.showMessage('Data Extraction', f'{response} \n {self.outputPath}')
       except Exception as e:
           self.showMessage("Error!", f'{e}\nPlease! Use the correct files and steps')

       self.statusLabel.setText('')

    #function to show the restult folder
    def show_thermalOutput_folder(self):
       try:
           path = self.outputPath
           # self.folder_path = os.path.dirname(self.folder_path) # to find the parent directory
           QDesktopServices.openUrl(QUrl.fromLocalFile(path))
       except Exception as e:
           self.showMessage('Error',  e)

    def show_sensorOutput_folder(self):
       try:
           with open('savepath.txt', 'r') as file:
               path = file.read()
               # self.folder_path = os.path.dirname(self.folder_path) # to find the parent directory
           QDesktopServices.openUrl(QUrl.fromLocalFile(path))
       except Exception as e:
           self.showMessage('Error!', e)


    def showMessage(self,msg, response):
        # Create a message box
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setWindowTitle(msg)
        msgBox.setText(response)
        msgBox.setStandardButtons(QMessageBox.Ok)
        msgBox.exec_()

    def open_Next_Tab(self, tab):

        self.theTab = tab
        self.tabWidget.setCurrentIndex(self.tabWidget.indexOf(self.theTab))






if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Processing = QtWidgets.QMainWindow()
    ui = Ui_Processing()
    ui.setupUi(Processing)
    Processing.show()
    sys.exit(app.exec_())
